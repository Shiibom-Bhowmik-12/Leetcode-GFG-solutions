struct Node{
   Node *links[26];
   int cp;
   int cw;
   
   bool containsKey(char ch){
       return (links[ch-'a']!=NULL);
   }
    
   void put(char ch,Node *node){
       links[ch-'a']=node;
   }
   
   Node *get(char ch){
       return links[ch-'a'];
   }
    
   void increase_prefix(){
       cp++;
   }
    
   void increase_word(){
       cw++;
   }
    
   void decrease_prefix(){
       cp--;
   }
    
   void decrease_word(){
       cw--;
   }
    
   int end_word(){
       return cw;
   }
    
   int end_prefix(){
       return cp;
   }
};

class Trie{
    private:Node *root;
    public:

    Trie(){
        // Write your code here.
        root=new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
            node->increase_prefix();
        }
        node->increase_word();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i])){
                node=node->get(word[i]);
            }
            else{
                return 0;
            }
        }
        node->end_word();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i])){
                node=node->get(word[i]);
            }
            else{
                return 0;
            }
        }
        node->end_prefix();
    }

    void erase(string &word){
        // Write your code here.
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i])){
                node=node->get(word[i]);
                node->decrease_prefix();
            }
            else{
                return;
            }
        }
        
        node->decrease_word();
    }
};
