/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

#include<bits/stdc++.h>
struct TrieNode{
    TrieNode *Links[26];
    bool flag=false;
    
    bool isContainsKey(char ch){
        return (Links[ch-'a']!=NULL);
    }
    
    TrieNode *get(char ch){
        return Links[ch-'a'];
    }
    
    void put(char ch,TrieNode *node){
        Links[ch-'a']=node;
    }
    
    void setEnd(){
        flag=true;
    }
    
    bool isEnd(){
        return flag;
    }
};

class Trie {
private: TrieNode *root;    
public:
    Trie() {
        root=new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->isContainsKey(word[i])){
                node->put(word[i],new TrieNode());
            }
            
            node=node->get(word[i]);
        }
        
        node->setEnd();
    }
    
    bool search(string word) {
        TrieNode *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->isContainsKey(word[i])){
                return false;
            }
            
            node=node->get(word[i]);
        }
        
        return node->isEnd();
    }
    
    bool startsWith(string prefix) {
        TrieNode *node=root;
        for(int i=0;i<prefix.size();i++){
            if(!node->isContainsKey(prefix[i])){
                return false;
            }
            
            node=node->get(prefix[i]);
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
